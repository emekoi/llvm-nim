## ===-- llvm-c/TargetMachine.h - Target Machine Library C Interface - C++ -*-=*\
## |*                                                                            *|
## |*                     The LLVM Compiler Infrastructure                       *|
## |*                                                                            *|
## |* This file is distributed under the University of Illinois Open Source      *|
## |* License. See LICENSE.TXT for details.                                      *|
## |*                                                                            *|
## |*===----------------------------------------------------------------------===*|
## |*                                                                            *|
## |* This header declares the C interface to the Target and TargetMachine       *|
## |* classes, which can be used to generate assembly or object files.           *|
## |*                                                                            *|
## |* Many exotic languages can interoperate with C code but have a harder time  *|
## |* with C++ due to name mangling. So in addition to C, this interface enables *|
## |* tools written in such languages.                                           *|
## |*                                                                            *|
## \*===----------------------------------------------------------------------===

import
  llvm-c/Target, llvm-c/Types

type
  LLVMTargetMachineRef* = ptr LLVMOpaqueTargetMachine
  LLVMTargetRef* = ptr LLVMTarget
  LLVMCodeGenOptLevel* = enum
    LLVMCodeGenLevelNone, LLVMCodeGenLevelLess, LLVMCodeGenLevelDefault,
    LLVMCodeGenLevelAggressive
  LLVMRelocMode* = enum
    LLVMRelocDefault, LLVMRelocStatic, LLVMRelocPIC, LLVMRelocDynamicNoPic
  LLVMCodeModel* = enum
    LLVMCodeModelDefault, LLVMCodeModelJITDefault, LLVMCodeModelSmall,
    LLVMCodeModelKernel, LLVMCodeModelMedium, LLVMCodeModelLarge
  LLVMCodeGenFileType* = enum
    LLVMAssemblyFile, LLVMObjectFile





## * Returns the first llvm::Target in the registered targets list.

proc LLVMGetFirstTarget*(): LLVMTargetRef
## * Returns the next llvm::Target given a previous one (or null if there's none)

proc LLVMGetNextTarget*(t: LLVMTargetRef): LLVMTargetRef
## ===-- Target ------------------------------------------------------------===
## * Finds the target corresponding to the given name and stores it in \p T.
##   Returns 0 on success.

proc LLVMGetTargetFromName*(name: cstring): LLVMTargetRef
## * Finds the target corresponding to the given triple and stores it in \p T.
##   Returns 0 on success. Optionally returns any error in ErrorMessage.
##   Use LLVMDisposeMessage to dispose the message.

proc LLVMGetTargetFromTriple*(triple: cstring; t: ptr LLVMTargetRef;
                             errorMessage: cstringArray): LLVMBool
## * Returns the name of a target. See llvm::Target::getName

proc LLVMGetTargetName*(t: LLVMTargetRef): cstring
## * Returns the description  of a target. See llvm::Target::getDescription

proc LLVMGetTargetDescription*(t: LLVMTargetRef): cstring
## * Returns if the target has a JIT

proc LLVMTargetHasJIT*(t: LLVMTargetRef): LLVMBool
## * Returns if the target has a TargetMachine associated

proc LLVMTargetHasTargetMachine*(t: LLVMTargetRef): LLVMBool
## * Returns if the target as an ASM backend (required for emitting output)

proc LLVMTargetHasAsmBackend*(t: LLVMTargetRef): LLVMBool
## ===-- Target Machine ----------------------------------------------------===
## * Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine

proc LLVMCreateTargetMachine*(t: LLVMTargetRef; triple: cstring; cpu: cstring;
                             features: cstring; level: LLVMCodeGenOptLevel;
                             reloc: LLVMRelocMode; codeModel: LLVMCodeModel): LLVMTargetMachineRef
## * Dispose the LLVMTargetMachineRef instance generated by
##   LLVMCreateTargetMachine.

proc LLVMDisposeTargetMachine*(t: LLVMTargetMachineRef)
## * Returns the Target used in a TargetMachine

proc LLVMGetTargetMachineTarget*(t: LLVMTargetMachineRef): LLVMTargetRef
## * Returns the triple used creating this target machine. See
##   llvm::TargetMachine::getTriple. The result needs to be disposed with
##   LLVMDisposeMessage.

proc LLVMGetTargetMachineTriple*(t: LLVMTargetMachineRef): cstring
## * Returns the cpu used creating this target machine. See
##   llvm::TargetMachine::getCPU. The result needs to be disposed with
##   LLVMDisposeMessage.

proc LLVMGetTargetMachineCPU*(t: LLVMTargetMachineRef): cstring
## * Returns the feature string used creating this target machine. See
##   llvm::TargetMachine::getFeatureString. The result needs to be disposed with
##   LLVMDisposeMessage.

proc LLVMGetTargetMachineFeatureString*(t: LLVMTargetMachineRef): cstring
## * Create a DataLayout based on the targetMachine.

proc LLVMCreateTargetDataLayout*(t: LLVMTargetMachineRef): LLVMTargetDataRef
## * Set the target machine's ASM verbosity.

proc LLVMSetTargetMachineAsmVerbosity*(t: LLVMTargetMachineRef;
                                      verboseAsm: LLVMBool)
## * Emits an asm or object file for the given module to the filename. This
##   wraps several c++ only classes (among them a file stream). Returns any
##   error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.

proc LLVMTargetMachineEmitToFile*(t: LLVMTargetMachineRef; m: LLVMModuleRef;
                                 filename: cstring; codegen: LLVMCodeGenFileType;
                                 errorMessage: cstringArray): LLVMBool
## * Compile the LLVM IR stored in \p M and store the result in \p OutMemBuf.

proc LLVMTargetMachineEmitToMemoryBuffer*(t: LLVMTargetMachineRef;
    m: LLVMModuleRef; codegen: LLVMCodeGenFileType; errorMessage: cstringArray;
    outMemBuf: ptr LLVMMemoryBufferRef): LLVMBool
## ===-- Triple ------------------------------------------------------------===
## * Get a triple for the host machine as a string. The result needs to be
##   disposed with LLVMDisposeMessage.

proc LLVMGetDefaultTargetTriple*(): cstring
## * Adds the target-specific analysis passes to the pass manager.

proc LLVMAddAnalysisPasses*(t: LLVMTargetMachineRef; pm: LLVMPassManagerRef)